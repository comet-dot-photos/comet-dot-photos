Directories and Files in Comet.Photos Source Tree

preprocessing (directory) - The python programs that preprocess from the USGS Isis Data to a form that can be used by comet.photos.  The result of running the programs in preprocessing in sequence is a file called viewData.json, which contains camera and environment information for each image. By doing this preprocessing, comet.photos can operate faster and interactively.
Files (Python programs) in preprocessing directory:
generate_cubs.py - converts OSINAC files to CUB files by invoking rososiris2isis.
move_cubs.py - moves the CUB files to a new tree organized by date (YYMM)
get_campt_info.py - traverses the CUB tree, and tests 9 points for visibility using campt. This provides comet.photos with the necessary viewing information for the cub image.
generate_pngs.py - traverses the CUB tree, generating png files using isis2std.
pngs_to_jpgs.py - traverses the png file tree, and converts them to jpgs (much smaller file size)
get_campt_holdouts.py - we decided that testing 9 points for visibility (get_campt_info.py) was insufficient, so get_campt_holdouts.py tests, so we add 16 additional visibility points to the original 9, for 25 total via campt. If more than one point is visible, or if only one point of the 25 is visible, we check pixels in the 8-connected directions (cardinal and inter-cardinal) DELTA (here 10) pixels away. If any of these also intersect, then we use this information to generate viewing information.
move_cams.py - Moves the "campt_holdouts", the CAMS that were found in the second, more exhaustive visibility test, to join the others in the CAM tree.
cam_to_json.py - Parses the CAM files generated by get_campt_info.py and get_campt_holdouts.py to generate a JSON file, viewData.json, with camera / environment information for the image.

public_html (directory) - this directory contains the programs that run the comet.photos site. It has several sub-directories described below:

public_html/dan/V2 (directory) - This contains the files that are sent to the client web browser to run comet.photos.
Files in public_html/dan/V2 directory:
index.html - The root html file for comet.photos. Navigating to comet.photos executes this small file, which sets up the code as a "node client" via socket.io.js, and invokes paintCometV2.js - the main client-side javascript program for comet.photos.
paintCometV2.js - This is the main client-side program for comet.photos. It uses Three.js to render the comet, provides the on-screen UI, allows filtering images by various parameters, and maps the images onto the 3D model.
cometInfoV2.js - This is a utility javascript file used by paintCometV2.js. It defines a CometInfo class which holds information about each image's "comet view". It computes and stores the important information about each image's viewing geometry, and can turn "decals" (image maps) on and off for each view.
CG_NavCam_200K_facets.obj - the geometry file for the comet (borrowed from the shapeviewer distribution).
J80 - a symbolic link to the directory of the JPEG images.
node_modules, package.json, package-lock.json - the node modules and package info used by the comet.photos client.
three-mesh-bvh-master - The bvh module allows a number of 3D calculations to be performed much faster. It uses a space partitioning approach to reduce the number of 3D calculations necessary.
overview.html - an overview of the comet.photos project, accessible as a help file from within comet.photos.
OverviewFig1.png, OverviewFig2.png - two images used within the overview.
quickstart.html - a help file, accessible form within comet.photos, explaining how to get started.
viewdata.json - a JSON file, produced through pre-processing, that contains information on each image and the viewing geometry/parameters that generated it.

public_html/vis (directory) - This directory holds the server-side javascript for comet.photos, which handles the visibility calculations, both preprocessing and during runtime.
Files in public_html/vis:
cometserver.js - This is the javascript for the server-side comet.photos code. It runs a node server and waits for visibility queries from the client. During a second preprocessing step, it also creates "cometVis.bin", which is a huge bit-array that indicates which vertices are visible in each image. Then cometVis.bin is used to answer real-time queries about vertex visibility, which are essentially table-lookups of bit-values that can be performed quickly. Also during the preprocessing phase, cometserver adds bounding box and z-range info for the visible vertices into a "new_viewArray.json" - which (after being renamed as viewdata.json) is placed in dan/V2 and is the final viewdata used by comet.photos. 
checkvis.c (and .so) - Some c code that is dynamically loaded by cometserver.js to make the bit lookups happen considerably faster than through javascript.
redirect.js - another node server that is run to redirect http requests and https requests to the cometserver.
sessions - a folder holding saved parameter settings (not used in the released version of comet.photos)
ecosystem.config.js - We use the pm2 node program to automatically start the cometserver and redirect server when the machine reboots. This folder is used to store information for pm2.
node_modules, package.json, package-lock.json - node support for our comet.photos server side code.

public_html/bvh (directory) - This directory contains another version of comet.photos (can be invoked via: http://comet.photos/paintComet9.html) which was used to do the visibility pre-processing. To do the preprocessing, change the "static PREPROCESSING = false" in cometUtils9.js to true.

public_html/J80 - The jpegs for all of the comet images, generated during a pre-processing step.

















